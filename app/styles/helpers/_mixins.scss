@mixin size($width,$height:$width) {
    width: $width;
    height: $height;
}
@mixin absCenter($descetion,$position:absolute){
    position: $position;
    @if($descetion =="center"){
        top:50%;
        left: 50%;
        transform: translate(-50%,-50%);
    }
    @if($descetion =="top"){
        top:50%;
        transform: translateY(-50%);
    }
    @if($descetion =="left"){
        left:50%;
        transform: translateX(-50%);
    }
    @if($descetion =="full"){
        left:0;
        top: 0;
        width: 100%;
        height: 100%;
        
    }
   
    
}
@mixin media($breakpoint) {
    @if $breakpoint == phone {
        @media (max-width:739px){@content};
    }
    @if $breakpoint== tablet{
        @media (min-width:740px)and (max-width:1023px){@content};
    }
    @if $breakpoint== phone-tablet{
        @media (max-width:1024px){@content};
    }
    @if $breakpoint== big-destop{
        @media (min-width:1023px){@content};
    }
}
@mixin maxWidth($breakpoint) {
    @media screen and (max-width:$breakpoint){
        @content;
    }
}
@mixin minWidth($breakpoint) {
    @media screen and (min-width:$breakpoint){
        @content;
    }
}
@mixin flexbox($align-item:stretch,$justify-content:flex-start,$flex-desciton:row,$flex:flex,$flex-wrap:nowrap) {
    display:$flex;
    align-items:$align-item;
    justify-content:$justify-content;
    flex-direction:$flex-desciton;
    flex-wrap: $flex-wrap;

    
}
@mixin hidescroll() {
    -ms-overflow-style: none;
    scrollbar-width:none;
    &::-webkit-scrollbar{
        display: none;
    }
}
@mixin textclamp($row:1,$width:100%) {
    display: -webkit-box;
    -webkit-line-clamp: $row;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    width:$width ;
    max-width:$width ;
    white-space:pre-wrap;
   word-break: break-word;
}
@mixin hoverEffec($itemClass,$contentClass,$transform:"true") {
    #{$itemClass}{
        position: relative;
        z-index: 1;
        & > *{
            transition: all 0.2s linear;
             will-change: transform; 
        }
       
        #{$contentClass}{
            opacity: 0;
            visibility: hidden;
            @include absCenter("full");
            background: linear-gradient(to bottom, rgba($primary-color,.8),rgba($secondary-color,.8)) no-repeat center /cover;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
    
        }
        @if $transform=="true"{

            &::before{
                content:"";
                  @include absCenter("full");
                  background-color:$third-color;
                  z-index: -1;
              
             }
        }
       
       &:hover{
       
           #{$contentClass}{
               opacity: 1;
               visibility: visible;
           }
           @if $transform=="true"{
               &>*{
                transform:translate(-1rem,-1rem);
               }
        }
       }
    }
   
}
@mixin touchSlider($width:80%) {
    flex-wrap: nowrap;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-snap-stop:always; ;
    
    & > *{
        flex: 0 0 $width;
        scroll-snap-align: center;
    }
}
@mixin color($config:()) {
    $config:extend(
        (color:red),
        $config
    );
    color:map-get($config, color );
}
@mixin flexbox2($config:()) {
    $config:extend(
        (
            align-items:stretch,
            justify-content:flex-start,
            flex-direction:row,
            display:flex,
            flex-Wrap:nowrap),
        $config
    );

    display: map-get($config, display );
    align-items:map-get($config, align-items );
    justify-content:map-get($config, justify-content );
    flex-direction:map-get($config, flex-direction );
    flex-wrap:map-get($config, flex-wrap ) ;
    
}